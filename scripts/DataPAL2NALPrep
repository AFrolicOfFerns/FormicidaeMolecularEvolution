#!/bin/bash

# The command to run this is `./scripts/DataPAL2NALPrep ./scripts/inputurls.txt
while read -r line;
do
  # Start setting up variables from the inputurls file:
  # This will get the species abbreviation from the inputurls file:
  export abbrev=`echo "$line" | awk -F',' '{print $2}' | awk -F'_' '{print $1}'`
  echo This is the species abbreviation: $abbrev
  # I want to get the cleaned nucleotide sequence (CDS) file and the aligned amino acid (MSA) file for each species:
  # MSA: /FormicidaeMolecularEvolution/Proteins/proteins_acep.fasta
  # CDS: /FormicidaeMolecularEvolution/CodingSequences/cds_acep_transcripts.fasta
  export MSAfile=proteins_$abbrev.fasta
  export CDSfile=cds_$abbrev"_transcripts.fasta"
  echo This is the MSA file: $MSAfile


  # Create an associative array containing all of the gene names from the MSA file (this is the subset of genes we want to keep from the CDS file):
  # This creates an associative array named geneNames:
  declare -A geneNames
  # Now we're reading through the lines of the MSA file (which we get from the done statement at the end of this section):
  while read -r MSAline;
  do
    # This checks each line to see if it starts with a > sign, meaning it's a gene name:
    if (echo $MSAline |grep '^>') ; then
      #echo this is the not-cleaned gene name $MSAline
      #echo this is the cleaned gene name $MSAline | sed "s|>${abbrev}_transcripts_||g"
      # This creates a variable, cleanGeneName, that will store the gene name extracted from that line:
      export cleanGeneName=`echo $MSAline | sed "s|>${abbrev}_transcripts_||"`
      echo cleanGeneName is $cleanGeneName
      # This puts the cleanGeneName into the array:
      geneNames[$cleanGeneName]=$cleanGeneName
      echo Clean gene name is: [$cleanGeneName]
      #echo Array is: $geneNames[$cleanGeneName]
      #echo Array2 is: ${geneNames[$cleanGeneName]}
      #echo __________________________________________________
    fi
  done < ./Proteins/$MSAfile
  echo __________________________________________________
  echo The gene names in the array are: ${geneNames[*]}

  # Here we set the file to which our filtered output will be sent:
  export outfileName="filtered_"$abbrev"_cds.fasta"
  echo This will be sent to the output file: $outfileName
  # Here we set the coding sequence file that we are working with:
  export f="./CodingSequences/cds_"$abbrev"_transcripts.fasta"
  echo The coding sequence file is: $f
  echo __________________________________________________
  export printMore=false
  # This loop will read through all of the lines in the coding sequence file:
  while read -r fline;
  do
    # This part will check if the line of the coding sequence file is a gene name (starts with an ">"):
    if (echo $fline |grep '^>') ; then
      # Now we want to filter the line so that it's just the gene name. This will entail removing the > AND the first space and everything after that:
      export currentGeneName=`echo $fline | sed 's/>//' | sed 's/ .*//'`
      echo The current gene name is: [$currentGeneName]
      # This loop will check if the gene name is present in the corresponding multiple sequence alignment file:
      if [ -v ${geneNames[$currentGeneName]} ] ; then
        echo $currentGeneName is in the array.
        echo __________________________________________________
        # If the gene is present, then it will be sent to our output file.
        export printMore=true
      else
        echo $currentGeneName is NOT PRESENT in the array.
        echo __________________________________________________
        #If the gene name isn't present in the multiple sequence alignment file, then we will move on to the next gene name.
        export printMore=false
      fi
    fi
    # This will continue printing the gene sequence to the output file.
    if ($printMore -eq true); then
      echo $fline >> $outfileName
    fi
  done < $f
done < $1
